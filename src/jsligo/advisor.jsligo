#include "advisor_types.jsligo"
#include "advisor_errors.jsligo"

let request = ([_p, s] : [unit, advisorStorage]) : advisorFullReturn => {
    let c_opt : option<contract<unit>> = Tezos.get_entrypoint_opt("%sendValue", s.indiceAddress);
    let destination : contract<unit> = match (c_opt , {
        Some:(c : contract<unit>) => c,
        None:() => (failwith(missing_entrypoint_sendvalue) as contract<unit>)
    });
    let op : operation = Tezos.transaction(unit, 0 as mutez, destination);
    return [list([ op ]), s]
};

let execute = ([indiceVal, s] : [int, advisorStorage]) : advisorFullReturn => {
    return [(list([]) as list<operation>), { ...s, result: s.algorithm(indiceVal) }]
};

let change = ([p, s] : [advisorAlgo, advisorStorage]) : advisorFullReturn => {
    return [(list([]) as list<operation>), { ...s, algorithm: p}]
};

let advisorMain = ([ep, store] : [advisorEntrypoints, advisorStorage]) : advisorFullReturn => {
    return match (ep, {
        ReceiveValue: (p: int) => execute(p, store),
        RequestValue: (p: unit) => request(p, store),
        ChangeAlgorithm: (p: advisorAlgo) => change(p, store)
    });
};
